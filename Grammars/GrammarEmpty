--
--#### demarcates sections
--Major sections are: Grammar, Spaces, Space Objects & Operations, Grammar Rule->Object+Operation Map, (Unimplemented yet) AST+Annotation->DSL Map, (Unimplemented yet) AST->D Object/Operation Map

--Grammar begins here

_tPROGRAM :=
	tSEQ *sGLOBALSTMT @PhysCommand,Seq,globalseq@ ~A Compound Global Statement

_fGLOBALSTMT :=
--	SEQ *GLOBALSTMT @PhysCommand,Seq,globalseq@ | ~A Compound Global Statement
	=FUNC_DECL ~Function Declaration

_STMT := 
	COMPOUND *sSTMT @cmd,seq,seq@ | ~A Compound Statement
	=DECLARE | ~A Declaration Statement
	=ASSIGN | ~An Assignment Statement
	=REXPR | ~An R-Value Expression
	=LEXPR | ~An L-Value Expression
	=WHILE | ~A While Statement
	=FOR | ~A For Statement
	=TRY  ~A Try Statement

_FUNC_DECL :=
	=MAIN_FUNC | ~Main Function Declaration
	=VOID_FUNC ~A Void OR Ignored-Return Function Declaration

1VOID_FUNC :=
	fDECL +STMT <$NAME> <P,!I,Var> ~Function Declaration With Void OR Unrecognized Type

1MAIN_FUNC INTERP:F :=
	fDECL +STMT <$NAME> <P,!I,Var> ~Main Function Declaration

_WHILE INTERP:W :=
	WHILE +BOOL_EXPR +STMT <$NAME$LOC> <B,⊢=⊢,D> ~A Standard While Statement with a condition and body

_TRY INTERP:T :=
	TRY +STMT <$NAME$LOC> <B,⊢=⊢,D> ~Missing a catch for now!

_FOR INTERP:F :=
	FOR +BOOL_EXPR +STMT <$NAME$LOC> <B,⊢=⊢,D> ~What's missing here? 


_DECLARE INTERP:D :=
	DECL +REAL1_VAR +REAL1_EXPR <$NAME$LOC> <B,⊢=⊢,D> | ~ Declaration : Declare R1 Var = R1 Expression;
	DECL +REAL3_VAR +REAL3_EXPR <$NAME$LOC> <B,⊢=⊢,D> | ~ Declaration : Declare R3 Var = R3 Expression;
	DECL +REALMATRIX4_VAR +REALMATRIX4_EXPR <$NAME$LOC> <B,⊢=⊢,D> | ~ Declaration : Declare Matrix 4x4 Var = Matrix 4x4 Expression;
	DECL +REAL4_VAR +REAL4_EXPR <$NAME$LOC> <B,⊢=⊢,D> | ~ Declaration : Declare R4 Var = R4 Expression;
	DECL +BOOL_VAR +BOOL_EXPR <$NAME$LOC> <B,⊢=⊢,D> | ~ Declaration : Boolean Variable
	DECL +REAL1_VAR <$NAME$LOC> <B,⊢=⊢,Command> | ~ Declaration : Declare R1 Var;
	DECL +REAL3_VAR <$NAME$LOC> <B,⊢=⊢,Command> | ~ Declaration : Declare R3 Var;
	DECL +REALMATRIX4_VAR <$NAME$LOC> <B,⊢=⊢,Command> | ~ Declaration : Declare Matrix 4x4 Var;
	DECL +REAL4_VAR <$NAME$LOC> <B,⊢=⊢,Command> | ~ Declaration : Declare R4 Var;
	DECL +BOOL_VAR <$NAME$LOC> <B,⊢=⊢,Command> ~ Declaration : Declare Boolean Var;

_ASSIGN INTERP:D :=
	ASNR1 +REAL1_VAR +REAL1_EXPR <$NAME$LOC> <B,⊢=⊢,D> | ~ Declaration : Assign R1 Var = R1 Expression;
	ASNR3 +REAL3_VAR +REAL3_EXPR <$NAME$LOC> <B,⊢=⊢,D> | ~ Declaration : Assign R3 Var = R3 Expression;
	ASNM4 +REALMATRIX4_VAR +REALMATRIX4_EXPR <$NAME$LOC> <B,⊢=⊢,D> ~ Declaration : Assign Matrix 4x4 Var = Matrix 4x4 Expression;
	

	
_REXPR :=
	=BOOL_EXPR | ~A Boolean Expression
	=REAL3_EXPR | ~An R-Value Expression in R3
	=REAL1_EXPR | ~An R-Value Expression in R1
	=REALMATRIX4_EXPR | ~An R-Value 4x4 Matrix Expression
	=REAL4_EXPR ~An R-Value Expression in R4

_LEXPR :=
	>REAL3_LEXPR ~An L-Value Expression in R3


.BOOL_EXPR VALUE(bool,1) :=
	REF .BOOL_VAR <$OP$NAME$LOC> <P,%,C> | ~A Boolean reference expression
	=BOOL_LITERAL 

+REALMATRIX4_EXPR INTERP:E :=
	REF .REALMATRIX4_VAR <$OP$NAME$LOC> <P,%,C> | ~Var Expression : Matrix 4 Variable As R-Value
	MUL +REALMATRIX4_EXPR +REALMATRIX4_EXPR <$OP$LOC> <P,⬝,B> | ~Multiplication Expression : R4 Expression * R4 Expression
	=REALMATRIX4_LITERAL 

+REAL4_EXPR VALUE(float,4) INTERP:E :=
	REF .REAL4_VAR <$OP$NAME$LOC> <P,%,C> |  ~Var Expression : R4 Variable As R-Value
	ADD +REAL4_EXPR +REAL4_EXPR <$OP$LOC> <P,+ᵥ,B> | ~Addition Expression : R4 Expression + R4 Expression
	MUL +REAL4_EXPR +REAL4_EXPR <$OP$LOC> <P,⬝,B> ~Multiplication Expression : R4 Expression * R4 Expression
	

+REAL3_EXPR VALUE(float,3) INTERP:E := 
	REF .REAL3_VAR <$OP$NAME$LOC> <P,%,C> |  ~Var Expression : R3 Variable As R-Value
	ADD +REAL3_EXPR +REAL3_EXPR <$OP$LOC> <P,+ᵥ,B> | ~Addition Expression : R3 Expression + R3 Expression
	LMUL +REAL1_EXPR +REAL3_EXPR <$OP$LOC> <P,•,B> | ~Multiplication Expression : R1 Expression * R3 Expression
	RMUL +REAL3_EXPR +REAL1_EXPR <$OP$LOC> <P,•,B> | ~Multiplication Expression : R1 Expression * R3 Expression
	TMUL +REALMATRIX4_EXPR +REAL3_EXPR <$OP$LOC> <P,S,B> | ~Multiplication Expression : R4 Matrix Expression * R3 Expression
	=REAL3_LITERAL

+REAL3_LEXPR VALUE(float,3) :=
	LREF .REAL3_VAR <$OP$NAME$LOC> <P,%,Expression> ~Var Expression : R3 Variable As L-Value

+REAL1_EXPR VALUE(float,1) INTERP:E := 
	REF .REAL1_VAR <$OP$NAME$LOC> <P,%,C> | ~Var Expression : R1 Variable As R-Value
	ADD +REAL1_EXPR +REAL1_EXPR <$OP$LOC> <P,+ᵥ,B> | ~Addition Expression : R1 Expression + R1 Expression
	MUL +REAL1_EXPR +REAL1_EXPR <$OP$LOC> <P,•,B> | ~Multiplication Expression : R1 Expression * R1 Expression
	=REAL1_LITERAL
	
iBOOL_VAR VALUE(float,1) INTERP:V := 
	vIDENT <$NAME> <P,!I,V> ~Boolean Identifier	
iREAL1_VAR VALUE(float,1) INTERP:V := 
	vIDENT <$NAME> <P,!I,V> ~R1 Variable Identifier
iREAL3_VAR VALUE(float,3) INTERP:V := 
	vIDENT <$NAME> <P,!I,V> ~R3 Variable Identifier
iREAL4_VAR VALUE(float,4) INTERP:V := 
	vIDENT <$NAME> <P,!I,V> ~R4 Variable Identifier
iREALMATRIX4_VAR INTERP:V := 
	vIDENT <$NAME> <P,!I,V> ~4x4 Matrix Variable Identifier



+REAL4_LITERAL VALUE(float,4) INTERP:E := 
	--REAL4_LIT .REAL1_EXPR .REAL1_EXPR .REAL1_EXPR .REAL1_EXPR <$OP$LOC> <I,⬝,Expression> | ~R4 Literal From 4 R1 Expressions
	REAL4_EMPTY <$OP$LOC> <I,⬝D,Expression> ~ Real 4 Literal With Empty Constructor
--	VALUE(float,3,0) <$OP$LOC> <I,⬝D,Expression> ~R3 Literal From 3 Real Values

+REAL3_LITERAL VALUE(float,3) INTERP:E := 
	REAL3_LIT .REAL1_EXPR .REAL1_EXPR .REAL1_EXPR <$OP$LOC> <I,⬝,Expression> | ~R3 Literal From 3 R1 Expressions
	REAL3_EMPTY <$OP$LOC> <I,⬝D,Expression> ~ Real 3 Literal With Empty Constructor
--	VALUE(float,3,0) <$OP$LOC> <I,⬝D,Expression> ~R3 Literal From 3 Real Values


+REAL1_LITERAL VALUE(float,1) INTERP:E := 
	REAL1_LIT <$OP$LOC> <I,⬝D,Expression> ~ Real 1 Literal
	--VALUE(float,1,0) <$OP$LOC> <P,⬝D,Expression> | ~ R1 Literal From Real Value
	--REAL1_EMPTY <$OP$LOC> <I,⬝D,Expression> ~ Real 1 Literal With Empty Constructor

+REALMATRIX4_LITERAL INTERP:E := 
	REALMATRIX4_EMPTY <$OP$LOC> <I,⬝,Expression> | ~ Real 4x4 Matrix With Empty Constructor
	REALMATRIX4_EMPTY2 .REALMATRIX4_EXPR <$OP$LOC> <I,⬝,Expression> | ~ Real 4x4 Matrix With Empty Constructor
--	R3R4_LIT .REAL3_EXPR REAL4_EXPR | ~A Real 4x4 Matrix instantiated with x E R3 and y E R4
	R4R3_LIT .REAL4_EXPR REAL3_EXPR <$OP$LOC> <I,⬝D,Expression> ~A Real 4x4 Matrix instantiated with x E R3 and y E R4
--	R3R3X3_LIT +REAL3_EXPR REALMATRIX3_EXPR | ~A Real 4x4 Matrix instantiated with x E R3 and y E R3x3
--	R3X3R3_LIT REALMATRIX3_EXPR +REAL3_EXPR | ~A Real 4x4 Matrix instantiated with x E R3 and y E R3x3
--	VALUE(float,16,0)

_SINK
	IGNORE ~Map Unused Constructs that we desire to match but we want to ignore in Peirce for whatever reason


_BOOL_LITERAL VALUE(bool,1,true) :=
	BOOL_LIT ~ Boolean Literal

####

--Define instantiable spaces
--EuclideanGeometry, Euclidean,{Dimension=*},classicalGeometry
--ClassicalTime, Affine, {Dimension=1},classicalTime
--ClassicalVelocity, Vector, {Derived=true},classicalVelocity
--ClassicalAcceleration, Vector, {Derived=true},classicalAcceleration

{
	EuclideanGeometry, Euclidean,{Dimension=*},classicalGeometry
	ClassicalTime, Affine, {Dimension=1},classicalTime
	EuclideanGeometry3, Euclidean,{Dimension=3},euclideanGeometry3
	ClassicalVelocity, Vector,{Derived=true},classicalVelocity
	ClassicalHertz, Vector,{Dimension=1},classicalHertz
	ClassicalLuminousIntensity, Vector,{Dimension=1},classicalLuminousIntensity
}
--Define instances
{
}

####

--Define instantiable objects & operations contingent on space type 

Vector={fCoordinateVector,Scalar,Quantity}
Affine={tTransform,fCoordinatePoint},Vector
Euclidean={Rotation,Orientation},Affine

####

{
	REAL1_EXPR={Vector.CoordinateVector,Affine.CoordinatePoint,Vector.Scalar,Vector.Quantity}
	REAL1_LITERAL={Vector.CoordinateVector,Affine.CoordinatePoint,Vector.Scalar,Vector.Quantity}
	REAL1_VAR={Vector.CoordinateVector,Affine.CoordinatePoint,Vector.Scalar,Vector.Quantity}
	REAL3_EXPR={Vector.CoordinateVector,Affine.CoordinatePoint}
	REAL3_VAR={Vector.CoordinateVector,Affine.CoordinatePoint}
	REAL3_LITERAL={Vector.CoordinateVector,Affine.CoordinatePoint}
	REALMATRIX4_EXPR={Affine.Transform}
	REALMATRIX4_LITERAL={Affine.Transform}
	REALMATRIX4_VAR={Affine.Transform}
	REAL4_EXPR={Euclidean.Rotation,Euclidean.Orientation}
	REAL4_LITERAL={Euclidean.Rotation,Euclidean.Orientation}
	REAL4_VAR={Euclidean.Rotation,Euclidean.Orientation}
}

####

####


####

####

Base
{
    Discard:
    {
        ExprWithCleanups,
        MaterializeTemporaryExpr,
        CXXBindTemporaryExpr
    }
    Capture:
    {
        ParenExpr:&.PAREN,
        DeclRefExpr:&.REF
    }
}



bool ROSBooleanMatcher BOOL_EXPR BOOL_LITERAL.0
{
	Capture:
	{
		CXXBoolLiteralExpr()@DEFAULT
		CXXMemberCallExpr(IGNORE).IGNORE@DEFAULT
	}
}

tfScalar ROSTFScalarMatcher REAL1_EXPR REAL1_LITERAL.0
{
	Capture:
    {
        BinaryOperator(tfScalar,tfScalar).+@$.ADD
        --BinaryOperator(tfScalar,tfScalar)./@$.DIV
        BinaryOperator(tfScalar,tfScalar).*@$.MUL
		--CXXMemberCallExpr(tf::Vector3).angle@$.FROMR3
		--CXXMemberCallExpr(tf::Vector3).distance@$.FROMR3
		--CXXMemberCallExpr(tf::Vector3).distance2@$.FROMR3
		--CXXMemberCallExpr(tf::Vector3).dot@$.FROMR3
		--CXXMemberCallExpr(tf::Vector3).length@$.FROMR3
		--CXXMemberCallExpr(tf::Vector3).length2@$.FROMR3
        --CXXMemberCallExpr(tf::Vector3).x@$.FROMR3
        --CXXMemberCallExpr(tf::Vector3).y@$.FROMR3
        --CXXMemberCallExpr(tf::Vector3).z@$.FROMR3
		--CXXMemberCallExpr(tf::Vector3).getX@$.FROMR3
		--CXXMemberCallExpr(tf::Vector3).getY@$.FROMR3
		--CXXMemberCallExpr(tf::Vector3).getZ@$.FROMR3
    }
}

float FloatMatcher REAL1_EXPR REAL1_LITERAL.0
{
	Capture:
    {
    }
}

double DoubleMatcher REAL1_EXPR REAL1_LITERAL.0
{
	Capture:
    {
    }
}

int IntMatcher REAL1_EXPR REAL1_LITERAL.0
{
	Capture:
    {
    }
}



tf::Vector3 ROSTFVector3Matcher REAL3_EXPR
{
	Capture:
    {	
		CXXConstructExpr(IGNORE,IGNORE,IGNORE)@REAL3_LITERAL.?
		--CXXConstructExpr(tfScalar,tfScalar,tfScalar)@REAL3_LITERAL.?
		CXXOperatorCallExpr(tf::Vector3,tf::Vector3).+@$.ADD
		CXXOperatorCallExpr(tf::Vector3,double).*@$.RMUL
		CXXOperatorCallExpr(double,tf::Vector3).*@$.LMUL
		CXXOperatorCallExpr(tf::Transform,tf::Vector3).*@$.TMUL
		--CXXMemberCallExpr(tf::Vector3).absolute@$.UNOP
        --CXXMemberCallExpr(tf::Vector3,tf::Vector3).cross@$.CROSS


		--CXXOperatorCallExpr(tf::Vector3,tf::Vector3).-@$.SUB


		--CXXConstructExpr(tfScalar,tfScalar,tfScalar)@REAL3_LITERAL.?
    }
}

tf::Point~tf::Vector3 ROSTFPointMatcher REAL3_EXPR
{

}

tf::Stamped<tf::Point>~tf::Vector3 ROSTFStampedPoint REAL3_EXPR
{

}

tf::Quaternion ROSTFQuaternionMatcher REAL4_EXPR
{
	Capture:
	{
		CXXConstructExpr(IGNORE,IGNORE,IGNORE,IGNORE)@REAL4_LITERAL.?
		--CXXOperatorCallExpr(tf::Transform,tf::Quaternion).*@$.MUL
		--CXXOperatorCallExpr(tf::Quaternion,tf::Quaternion).+@$.ADD
		--CXXOperatorCallExpr(tf::Quaternion,tf::Quaternion).*@$.MUL
	}
}


#ros::Time ROSTFTimeMatcher REAL1_EXPR
{
	Capture:
	{
		CXXConstructExpr(IGNORE)@REAL1_LITERAL.?
		--CXXConstructExpr(float)@REAL1_LITERAL.?
		CXXOperatorCallExpr(ros::Time,ros::Duration).+@$.ADD
	}
}

ros::Duration ROSTFDurationMatcher REAL1_EXPR
{
	Capture:
	{
		CXXConstructExpr(IGNORE)@REAL1_LITERAL.?
		CXXOperatorCallExpr(ros::Duration,ros::Duration).+@$.ADD
		CXXOperatorCallExpr(ros::Duration,double).*@$.MUL
		--CXXConstructExpr(int)@REAL1_LITERAL.?
		--CXXConstructExpr(double)@REAL1_LITERAL.?
		--CXXConstructExpr(float)@REAL1_LITERAL.?
	}
	
}

ros::Rate ROSRateMatcher REAL1_EXPR
{
	Capture:
	{
		CXXConstructExpr(IGNORE)@REAL1_LITERAL.?
	}
}

tf::Transform ROSTFTransformMatcher REALMATRIX4_EXPR
{
	Capture:
	{
		CXXConstructExpr()@REALMATRIX4_LITERAL.?
		CXXConstructExpr(tf::Quaternion,tf::Vector3)@REALMATRIX4_LITERAL.R4R3_LIT
		--CXXConstructExpr(tf::Matrix3x3,tf::Vector3)@REALMATRIX4_LITERAL.?
		CXXOperatorCallExpr(tf::Transform,tf::Transform).*@$.MUL
	}
}

tf::StampedTransform~tf::Transform ROSTFStampedTransform REALMATRIX4_EXPR
{
	Capture:
	{
		--CXXConstructExpr(tf::Transform,IGNORE,IGNORE,IGNORE)@REALMATRIX4_LITERAL.REALMATRIX4_EMPTY2
		CXXConstructExpr(IGNORE,IGNORE,IGNORE,IGNORE)@REALMATRIX4_LITERAL.REALMATRIX4_EMPTY
	}
}


geometry_msgs::Vector3Stamped ROSGeometryMsgsVector3StampedMatcher REAL3_EXPR
{
	Capture: 
	{
		CXXConstructExpr()@REAL3_LITERAL.?
	}
}

geometry_msgs::PointStamped ROSGeometryMsgsPointStampedMatcher REAL3_EXPR
{
	Capture: 
	{
		CXXConstructExpr()@REAL3_LITERAL.?
	}
}

--!tf::TransformListener ROSTransformListenerMatcher SINK
--{
--	Capture:
--	{
--	}
--}

--!tf::TransformBroadcaster ROSTransformBroadcasterMatcher SINK
--{
--	Capture:
--	{
--	}
--}


--      //tf::StampedTransform laser_to_base;
--      //listener.lookupTransform("base_link", "base_laser", ros::Time(0),laser_to_base);
--      // tf::Stamped<tf::Point> laser_point_tf;
--      // tf::pointStampedMsgToTF(laser_point,laser_point_tf);
--      // tf::Stamped<tf::Point> base_point_tf = laser_point_tf*laser_to_base;
--      // tf::pointStampedTFToMsg(base_point_tf,base_point);
      
#void ROSVoid1Matcher SINK
{
	Capture:
	{
		CallExpr(geometry_msgs::PointStamped,tf::Stamped<tf::Point>).pointStampedMsgToTF@ASSIGN.ASNR3 1
		CallExpr(tf::Stamped<tf::Point>,geometry_msgs::PointStamped).pointStampedTFToMsg@ASSIGN.ASNR3 1

	}
}

#void ROSVoid2Matcher SINK
{
	Capture:
	{
		CXXMemberCallExpr(IGNORE,IGNORE,geometry_msgs::PointStamped,geometry_msgs::PointStamped).transformPoint@ASSIGN.ASNR3 2
	}
}